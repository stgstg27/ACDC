# -*- coding: utf-8 -*-
"""
Created on Mon Jun 26 17:16:30 2017

@author: Saurabh
"""

import numpy as np
import cv2

#create(4000, 4000, CV_8UC1);
#src = cv2.imread('15811-23.jpg', CV_8UC1);
img = cv2.imread('15907-17.jpg',0)
#img_hsv = cv2.cvtColor(img1,cv2.COLOR_BGR2HSV)
#img  = cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)
#img_src = cv2.cvtColor(img_src,cv2.COLOR_BGR2GRAYs)
#print (len(img1[0]))
Z=[[0.0 for i in range(3264)]for j in range(2448)]

Z = img.reshape((-1,3))
# convert to np.float32
Z = np.float32(Z)

#print 


# define criteria, number of clusters(K) and apply kmeans()
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
K = 4
#ret,label,center=cv2.kmeans(Z,K,criteria,10,cv2.KMEANS_RANDOM_CENTERS)
"""This is adaptive threshold function bax size 15 and  constant value =6"""

#ret2,th2 = cv2.threshold(img,120,255,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
th3 = cv2.adaptiveThreshold(img,255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
        cv2.THRESH_BINARY_INV,15,6)


"""ret,nor_thresh = cv2.threshold(img,220,255,cv2.THRESH_BINARY)


kernel = np.ones((20,5),np.uint8)
opening = cv2.morphologyEx(nor_thresh, cv2.MORPH_OPEN, kernel)
closing = cv2.morphologyEx(nor_thresh, cv2.MORPH_CLOSE, kernel)
erosion = cv2.erode(closing,kernel,iterations=4)



# Now convert back into uint8, and make original image
#center = np.uint8(center)
#res = center[label.flatten()]
#res2 = res.reshape((img.shape))
"""
cv2.namedWindow('window',cv2.WINDOW_NORMAL)
#cv2.imshow('kernel',kernel)
cv2.imshow('window',th3)
#rett = np.matrix(ret)
#ret1 = np.uint8(rett)
#cv2.imshow('window',ret1)
#cv2.imshow('window',nor_thresh)
#cv2.imshow('window',erosion)
#cv2.imshow('window',th2)
cv2.waitKey(0)
cv2.destroyAllWindows()
